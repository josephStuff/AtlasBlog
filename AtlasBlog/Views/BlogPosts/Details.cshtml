@using AtlasBlog.Enums
@using Microsoft.AspNetCore.Identity
@inject SignInManager<BlogUser> SignInManager
@inject UserManager<BlogUser> _userManager


@model AtlasBlog.Models.BlogPost


@{
    ViewData["Title"] = "Details";
}


<div class="mt-5">
    <h1>BlogPost Details/Comments</h1>
    <hr />

    <div class="row row-cols-2">
        <dl class="row row-cols-1">
            <dt class="col-sm-4">
                @Html.DisplayNameFor(model => model.Blog)
            </dt>
            <dd class="col-sm-8">
                @Html.DisplayFor(model => model.Blog.BlogName)
            </dd>
            <dt class="col-sm-4">
                @Html.DisplayNameFor(model => model.Title)
            </dt>
            <dd class="col-sm-8">
                @Html.DisplayFor(model => model.Title)
            </dd>
            <dt class="col-sm-4">
                @Html.DisplayNameFor(model => model.Abstract)
            </dt>
            <dd class="col-sm-8">
                @Html.DisplayFor(model => model.Abstract)
            </dd>
            <dt class="col-sm-4">
                @Html.DisplayNameFor(model => model.Created)
            </dt>
            <dd class="col-sm-8">
                @Html.DisplayFor(model => model.Created)
            </dd>
        </dl>

        @if (User.IsInRole("Administrator") || (User.IsInRole("Moderator")))
        {
            <dl class="row row-cols-1">
                <dt class="col-sm-2">
                    @Html.DisplayNameFor(model => model.Slug)
                </dt>
                <dd class="col-sm-10">
                    @Html.DisplayFor(model => model.Slug)
                </dd>
                <dt class="col-sm-2">
                    @Html.DisplayNameFor(model => model.IsDeleted)
                </dt>
                <dd class="col-sm-10">
                    @Html.DisplayFor(model => model.IsDeleted)
                </dd>
                <dt class="col-sm-2">
                    @Html.DisplayNameFor(model => model.BlogPostState)
                </dt>
                <dd class="col-sm-10">
                    @Html.DisplayFor(model => model.BlogPostState)
                </dd>
                <dt class="col-sm-2">
                    @Html.DisplayNameFor(model => model.Updated)
                </dt>
                <dd class="col-sm-10">
                    @Html.DisplayFor(model => model.Updated)
                </dd>
            </dl>
        }
    </div>
</div>

<div>
    <dt class="col-sm-4">
        @Html.DisplayNameFor(model => model.Body)
    </dt>
    <dd class="col-sm-8">
        @Html.DisplayFor(model => model.Body)
    </dd>
</div>

@if (User.Identity.IsAuthenticated)
{
    // ----- Present a simple form for collecting the comment -------------
    <form asp-controller="Comments" asp-action="Create">
        <input type="hidden" name="BlogPostId" value="@Model?.Id" />
        <input type="hidden" asp-for="Slug" />
        <textarea class="form-control w-100" name="CommentBody" rows=2 placeholder="Add Comment"></textarea>
        <button class="btn btn-info mt-2">ADD COMMENT</button>
    </form>
}
else
{
    <a class="nav-link" asp-area="Identity" asp-page="/Account/Login" asp-route-returnUrl="@Url.Action("Details", "BlogPosts", new { slug = Model.Slug })">Login to add a comment</a>
}

<hr />

<div class="row">
        <div class="row " id="CommentSection">
            @foreach (var comment in Model.Comments.OrderByDescending(c => c.UpdatedDate))
            {
                <div class="col-12 g-3">
                    <div class=" targetParent container-fluid border-bottom g-2 mb-3">
                        <div class="card-header py-1" style="">
                            <span class="float-start redText">Author:   @comment.Author?.FullName</span>
                            @if (comment.ModeratedDate is null)
                            {
                                <span class="float-end redText">Posted:  @comment.CreatedDate.ToString("MMM dd, yyyy")</span>
                            }
                            else
                            {
                                <span class="float-end text-danger fst-italic">Moderated on:  @comment.ModeratedDate?.ToString("MMM dd, yyyy")</span>
                            }
                        </div>
                        <div class="targetChild card-body text-light overflow w-100" style="">
                            @if (comment.ModeratedDate is null)
                            {
                                <h5 class="card-title">@comment.CommentBody</h5>
                            }
                            else
                            {
                                <h6 class="text-danger fst-italic">Moderation Reason:  @comment.ModerateReason</h6>
                                <h5 class="card-title">@comment.ModeratedBody </h5>  @* <span class="fst-italic text-muted ms-2">(modified...)</span> *@
                            }
                        </div>

                        @*--------------------  THIS IS FOR THE COMMENT ROLE ---------------*@
                        @if (comment.ModeratedDate is null && (_userManager.GetUserId(User) == comment.AuthorId))
                        {
                            <div class="pb-2" style="">
                                <div class="row g-1">
                                    <div class="col">
                                        <button class="btnModal btn btn-outline-light btn-sm mt-1" data-commentId=@comment.Id data-bs-toggle="modal" data-bs-target="#editCommentModal">EDIT</button>
                                        @*SweetAlert Window*@
                                        <button class="btnSweetAlert btn btn-outline-light btn-sm mt-1 float-end" data-commentId=@comment.Id>DELETE</button>
                                    </div>
                                </div>
                            </div>
                        }
                        else if (_userManager.GetUserId(User) == comment.AuthorId)
                        {
                            <div class="card-footer pb-2" style="">
                                <div class="row g-1">
                                    <div class="col">                                        
                                        <button class="btnSweetAlert btn btn-outline-light btn-sm mt-1 float-end" data-commentId=@comment.Id>DELETE</button>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="card-footer" style="">
                                <div class="row g-1">
                                    <div class="col">
                                        <div data-commentId=@comment.Id></div>
                                    </div>
                                </div>
                            </div>
                        }

                        @* --------------- THIS IS FOR THE COMMENT MODERATOR -------------------------- *@
                        @if (User.IsInRole("Moderator") || (User.IsInRole("Administrator")))
                        {
                            <div class="card-footer pb-2" style="">
                                <div class="row row-cols-1 g-2">
                                    <div class="col">
                                        <button class="btnModModal btn btn-warning btn-sm w-50 mt-1" data-commentId=@comment.Id data-bs-toggle="modal" data-bs-target="#moderateCommentModal">MODERATE</button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
</div>

@*  @if (_userManager.GetUserId(User) == Model.Body.))  *@
@* else if (_userManager.GetUserId(User) == comment.AuthorId) *@

<div>
    @*@if (User.Identity.IsAuthenticated)
    {
        <a asp-action="Edit" asp-route-id="@Model?.Id"></a>
    }*@
    <a asp-action="Index">Back to List</a>
</div>

@* MODAL CONTENT LOADED HERE *@


<!----------------- Modal ------------------->

<div class="modal fade" id="editCommentModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="staticBackdropLabel1">Modal title</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form asp-action="Edit" asp-controller="Comments">
                    <input type="hidden" name="Id" id="modalCommentId" rows=5 />
                    <input type="hidden" asp-for="Slug" />

                    <div class="form-group">
                        <label class="control-label">Comment</label>
                        <textarea class="form-control" rows=5 name="CommentBody" id="modalCommentBody"></textarea>
                    </div>

                    <div class="form-group">
                        <button class="btn btn-sm btn-warning btn-outline-dark fw-bold w-100 fw-bold mt-2">EDIT</button>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="moderateCommentModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel2" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="staticBackdropLabel2">Modal Comment</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">

                @*1. Display a read-only version of the original body
                    2. A text area for collecting the Moderated Body
                    3. Select List of Mod Reasons
                *@
                <form asp-action="Moderate" asp-controller="Comments">
                    <input type="hidden" name="Id" id="modalModerateCommentId" />

                    <div class="form-group">
                        <label class="control-label">Original Body</label>
                        <textarea id="modalModerateCommentBody" rows=3 class="form-control" readonly></textarea>
                    </div>

                    <div class="form-group">
                        <label class="control-label">Moderated Body</label>
                        <textarea name="ModeratedBody" rows=3 class="form-control" placeholder="Please copy and paste the above comment first."></textarea>
                    </div>

                    <div class="form-group">
                        <label class="control-label">Moderation Reason</label>
                        <select class="form-control" name="ModerationReason" asp-items="@Html.GetEnumSelectList<ModerateReason>()"></select>
                    </div>

                    <div class="form-group">
                        <button class="btn btn-sm btn-warning btn-outline-dark w-100 fw-bold mt-1">SAVE</button>
                    </div>
                </form>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


<form name="formDeleteComment" asp-action="Delete" asp-controller="Comments">
    <input type="hidden" name="Id" id="deleteCommentId" />
</form>


@section Scripts{


<script src="~/lib/jquery/dist/jquery.min.js"></script>


            @* ------------------  HERE IS SOME SWEET ALERT INPUTS ------------------>     *@

<script>
    document.querySelectorAll("button.btnSweetAlert").forEach(btn => {
        btn.addEventListener("click", function () {
            document.getElementById("deleteCommentId").value = this.getAttribute('data-CommentId');
            deleteSweetAlert();
        });
    });

    function deleteSweetAlert(){

        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
        }).then((result) => {
            if (result.isConfirmed) {

                Swal.fire({
                    title: 'Deleted!',
                    text: 'Your comment has been deleted.',
                    icon: 'success',
                    showConfirmButton: false
                })

                setTimeout(function () {
                    document.formDeleteComment.submit();
                }, 3000);

            }
        })
    }
</script>


<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<link rel="stylesheet" href="sweetalert2.min.css">

<script src="sweetalert2.min.js"></script>


        @*----------- should I decide to use   QUILL  i'll need this code below _---------------_--_-------_->*@

<script>
    // ----  I WILL NEED A CLICK EVENT HANDLER FOR ALL BUTTONS WITH CLASS ---> btnMODAL <-----
    document.querySelectorAll("button.btnModModal").forEach(btn => {
        btn.addEventListener("click", function(){
            // --- THING 1:  GET THE ID OF THE COMMENT INTO THE MODAL -----
            document.getelementById('modalCommentId').value = this.getAttribute("data-commentId");

            // --- THING 2:  GET THE CommentBody INTO THE MODAL --------


            let parent = this.closest("div.targetParent");
            let child = parent.querySelectorAll("div.targetChild h5");
            document.getelelementById('modalCommentBody').innerText = child.innerText;
        });
    });

</script>

<script>
    document.querySelectorAll("button.btnModModal").forEach(btn => {
       btn.addEventListener("click", function(){

           //Thing 1: Get the Id of the comment into the Modal
           document.getElementById('modalModerateCommentId').value = this.getAttribute('data-commentId');

           //Thing 2: Get the original CommentBody into the read only textarea of the modal
           let parent = this.closest("div.targetParent");
           let child = parent.querySelector("div.targetChild h5");
           document.getElementById('modalModerateCommentBody').innerText = child.innerText;
       });
    });
    @* ---------   this was copied and pasted from J.T. -------- this section  --^^^^ *@
</script>

<script>
    // ----  I WILL NEED A CLICK EVENT HANDLER FOR ALL BUTTONS WITH CLASS ---> btnMODAL <-----
    document.querySelectorAll("button.btnModal").forEach(btn => {
        btn.addEventListener("click", function(){
            // --- THING 1:  GET THE ID OF THE COMMENT INTO THE MODAL -----
            document.getElementById('modalCommentId').value = this.getAttribute("data-commentId");

            // --- THING 2:  GET THE CommentBody INTO THE MODAL --------


            let parent = this.closest("div.targetParent");
            let child = parent.querySelector("div.targetChild h5");
            document.getElementById('modalCommentBody').innerText = child.innerText;
        });
    });

</script>


}