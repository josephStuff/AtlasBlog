@using AtlasBlog.Services.Interfaces
@using Microsoft.IdentityModel
@using Microsoft.AspNetCore.Identity
@using X.PagedList.Mvc.Core
@using X.PagedList.Web.Common

@inject IImageService _imageService
@inject SignInManager<BlogUser> SignInManager


@model X.PagedList.IPagedList<Blog>

    @*asp-route-returnUrl="@Url.Action("Index", "Home", new { slug = Model.Slug })"*@

@{
    ViewData["Title"] = "Home Page";
}

@if (User.IsInRole("Administrator || Moderator"))
{
    <h5 class="greenText pt-3">Home Index</h5>
}

<div class="pt-2">
@if (SignInManager.IsSignedIn(User))
{
    <p>
        <a asp-action="Create" asp-controller="Blogs">Create New</a>
    </p>
}
else
{
    <p>        
        <a class="nav-link" asp-action="Create" asp-area="Identity">Login to Create</a>
    </p>
}

</div>

<div class="pageBG py-md-5">
    <div class="container position-relative px-4 px-lg-5">
        <div class="row gx-lg-5 justify-content-center">
            <div class="col-md-10 col-lg-8 col-xl-7">
                <div class="site-heading text-center">
                    <h3 class="subheading">A Code Research Blog</h3>

                    <form asp-action="SearchIndex" asp-controller="BlogPosts">
                        <input name="SearchTerm" class="form-control" />
                        <button type="submit" class="btn-outline w-100 fw-bold glass-button redText">SEARCH</button>
                    </form>

                </div>
            </div>
        </div>
    </div>
</div>


<div class="row row-cols-md-3 row-cols-lg-4 g-4">
    @foreach (var item in Model)
    {
        <div>
            <div class="glass-jw-style h-100 px-1 hoverButton">
                <div>
                    <div class="text-center">
                        <h5 class="card-title text-center">@Html.DisplayFor(modelItem => item.BlogName)</h5>
                        <div class="card bg-black card-text border-bottom border-primary overflow">
                            @Html.DisplayFor(modelItem => item.ResearchTopic)
                        </div>
                        <div class="card bg-black card-text border-bottom border-top border-primary overflow" style="height: 3rem;">
                            @Html.DisplayFor(modelItem => item.Title)
                        </div>
                        <div class="card bg-black card-text border-bottom border-top border-primary overflow" style="height: 3rem;">
                            @Html.DisplayFor(modelItem => item.Description)
                        </div>
                    </div>
                </div>
                <div class="footer row row-cols-2 d-flex align-items-end p-2">
                    <div class="d-flex justify-content-start">
                        Posted: @Html.DisplayFor(modelItem => item.Created)
                    </div>
                    <div class="text-end">
                        @if (User.Identity.IsAuthenticated)
                        {
                            <a asp-action="Edit" asp-controller="Blogs" asp-route-id="@item.Id">
                                <i class="bi-pencil-fill" style="font-size: 1.5rem; color:lightyellow;"></i>
                            </a>
                            <a asp-action="Details" asp-controller="Blogs" asp-route-id="@item?.Id">
                                <i class="bi-person-fill" style="font-size: 1.5rem; color:lightyellow;"></i>
                            </a>
                            <a asp-action="Delete" asp-controller="Blogs" asp-route-id="@item?.Id">
                                <i class="bi-trash-fill" style="font-size: 1.5rem; color:red;"></i>
                            </a>

                        }

                    </div>
                </div>
            </div>
        </div>
    }
</div>



<div class="">
    <div class="greenText" type="text">
        Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
        @Html.PagedListPager(Model, pageNum => Url.Action("Index", new { pageNum }),
        new PagedListRenderOptions
        {
        LiElementClasses = new string[] { "page-link"},
        PageClasses = new string[] { "page-link" }
        })

    </div>
</div>



